{"version":3,"sources":["util/apiCaller.ts","TodoContext.tsx","components/login/TodoLoginTemplate.tsx","redux/features/loginSlice.tsx","components/login/TodoLogin.tsx","pages/LoginPage.tsx","components/TodoTemplate.tsx","components/TodoHead.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoCreate.tsx","pages/MainPage.tsx","pages/Routes.tsx","App.tsx","serviceWorker.tsx","redux/store.tsx","index.tsx"],"names":["_callee","todo","regenerator_default","a","wrap","_context","prev","next","axios","post","text","abrupt","sent","t0","console","log","stop","GetItems","_GetItems","apply","this","arguments","_callee2","response","_context2","get","data","_callee3","_context3","put","id","done","_callee4","_context4","delete","Login","_x4","_x5","_Login","_callee5","userid","userpw","_context5","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","todoReducer","state","action","type","_x","_AddItems","apiCaller","concat","array","_x2","_ToggleItems","filter","map","Object","objectSpread","_x3","_DeleteItems","initialTodos","TodoProvider","_ref","children","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","nextId","setNextID","_getItems","asyncToGenerator","mark","nextID","length","getItems","react_default","createElement","Provider","value","useTodoState","useContext","useTodoDispatch","TodoLoginTemplate","styled","div","_templateObject","TodoTemplate","loginSlice","createSlice","name","initialState","isLogined","status","reducers","userLogined","actions","TodoHeadBlock","TodoLogin_templateObject","LoginButton","button","_templateObject2","InsertFormPositioner","_templateObject3","InsertId","form","_templateObject4","InsertPw","_templateObject5","Input","input","_templateObject6","React","memo","navigate","useNavigate","useDispatch","setId","_useState3","_useState4","pw","setPw","onLogin","res","authInfo","alert","Fragment","placeholder","onChange","e","target","onClick","index_esm","LoginPage","login_TodoLoginTemplate","login_TodoLogin","TodoTemplateBlock","TodoTemplate_templateObject","TodoHead_templateObject","TasksLeft","TodoHead_templateObject2","TodoHead","today","Date","dateString","toLocaleString","year","month","day","dayName","weekday","undoneTasks","TodoHead_TodoHeadBlock","className","Remove","TodoItem_templateObject","TodoItemBlock","TodoItem_templateObject2","CheckCircle","TodoItem_templateObject3","props","css","TodoItem_templateObject4","Text","TodoItem_templateObject5","TodoItem_templateObject6","md_index_esm","TodoListBlock","TodoList_templateObject","TodoList","todos","components_TodoItem","key","CircleButton","TodoCreate_templateObject","open","TodoCreate_templateObject2","TodoCreate_templateObject3","InsertForm","TodoCreate_templateObject4","TodoCreate_templateObject5","setOpen","setValue","TodoCreate_InsertFormPositioner","onSubmit","preventDefault","current","TodoCreate_Input","autoFocus","MainPage","components_TodoTemplate","components_TodoHead","components_TodoList","components_TodoCreate","Pages","react_router","path","element","pages_LoginPage","pages_MainPage","GlobalStyle","createGlobalStyle","App_templateObject","App","react_router_dom","Routes","Boolean","window","location","hostname","match","persistConfig","verson","storage","persistedReducer","persistReducer","combineReducers","user","loginReducer","store","configureStore","reducer","persistStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f758b6fc.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport async function AddItems(todo) {\r\n    try {\r\n        return await axios.post('/addItem', {\r\n            text: todo.text,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function GetItems() {\r\n    try {\r\n        const response = await axios.get('/getItem', {});\r\n        return response.data;\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function ToggleItems(todo) {\r\n    try {\r\n        return await axios.put('/putItem', {\r\n            id: todo.id,\r\n            done: todo.done === 1 ? 0 : 1,\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function DeleteItems(todo) {\r\n    try {\r\n        return await axios.delete('/deleteItem', {\r\n            data: { id: todo.id },\r\n        });\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport async function Login(userid: string, userpw: string) {\r\n    const response = await axios.post(\r\n        '/findUser',\r\n        {\r\n            userid: userid,\r\n            userpw: userpw,\r\n        },\r\n    );\r\n    return response;\r\n}\r\n","import React, { createContext, useReducer, useContext, useState } from 'react';\nimport * as apiCaller from './util/apiCaller';\n\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext(null);\n\nfunction todoReducer(state, action) {\n    switch (action.type) {\n        case 'CREATE': {\n            apiCaller.AddItems(action.todo);\n            return state.concat(action.todo);\n        }\n        case 'REPLACE':\n            return action.array;\n        case 'TOGGLE': {\n            let id = state.filter((todo) => todo.id === action.id);\n            apiCaller.ToggleItems(id[0]);\n            return state.map((todo) => (todo.id === action.id ? { ...todo, done: todo.done === 1 ? 0 : 1 } : todo));\n            // 기본: return state.map(todo => todo.id === action.id ? { ...todo, done: !todo.done } : todo);\n            // 원래: return state.map(todo => (todo.id === action.id ? { ...todo, done: todo.done === 1 ? 0 : 1 } : todo));\n        }\n        case 'REMOVE': {\n            let id = state.filter((todo) => todo.id === action.id);\n            apiCaller.DeleteItems(id[0]);\n            return state.filter((todo) => todo.id !== action.id);\n        }\n        default:\n            return state;\n    }\n}\n\nconst initialTodos = [\n    {\n        id: 1,\n        text: 'sample',\n        done: false,\n    },\n    {\n        id: 2,\n        text: 'page',\n        done: true,\n    },\n];\n\nexport function TodoProvider({ children }) {\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\n    const [nextId, setNextID] = useState(3);\n\n    let data;\n    async function getItems() {\n        data = await apiCaller.GetItems();\n        let nextID = data[data.length - 1].id;\n        setNextID(nextID + 1);\n        dispatch({\n            type: 'REPLACE',\n            array: data,\n        });\n    }\n    getItems();\n\n    return (\n        <TodoStateContext.Provider value={state}>\n            <TodoDispatchContext.Provider value={dispatch}>\n                <TodoNextIdContext.Provider value={nextId}>{children}</TodoNextIdContext.Provider>\n            </TodoDispatchContext.Provider>\n        </TodoStateContext.Provider>\n    );\n}\n\nexport function useTodoState() {\n    return useContext(TodoStateContext);\n}\n\nexport function useTodoDispatch() {\n    return useContext(TodoDispatchContext);\n}\n\nexport function useTodoNextId() {\n    return useContext(TodoNextIdContext);\n}","import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoLoginTemplate = styled.div`\n  width: 512px;\n  height: 624px;\n\n  position: relative;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoLoginTemplate>{children}</TodoLoginTemplate>;\n}\n\nexport default TodoTemplate;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { RootState } from '../store';\r\n\r\nexport interface loginState {\r\n    isLogined: boolean;\r\n    userInfo?: iUserInfo;\r\n    status: 'idle' | 'loading' | 'failed';\r\n}\r\n\r\nconst initialState: loginState = {\r\n    isLogined: false,\r\n    status: 'idle',\r\n};\r\n\r\nexport interface iUserInfo {\r\n    id?: number;\r\n    userid?: string;\r\n    userpw?: string;\r\n}\r\n\r\nexport const loginSlice = createSlice({\r\n    name: 'login',\r\n    initialState,\r\n    reducers: {\r\n        userLogined: (state, action: PayloadAction<iUserInfo>) => {\r\n            state.isLogined = true;\r\n          },\r\n    },\r\n});\r\n\r\nexport const { userLogined } = loginSlice.actions;\r\n\r\nexport const selectAuth = (state: RootState) => state.user.isLogined;\r\nexport default loginSlice.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { IoMdLogIn } from 'react-icons/io';\r\n\r\nimport * as apiCaller from '../../util/apiCaller';\r\nimport { iUserInfo } from '../../redux/features/loginSlice';\r\nimport { userLogined } from '../../redux/features/loginSlice';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    h1 {\r\n        margin: 0;\r\n        font-size: 36px;\r\n        color: #343a40;\r\n        text-align: center;\r\n    }\r\n    padding-top: 30px;\r\n    padding-left: 32px;\r\n    padding-right: 32px;\r\n    padding-bottom: 30px;\r\n    border-bottom: 1px solid #e9ecef;\r\n`;\r\n\r\nconst LoginButton = styled.button`\r\n    background: #3866d9;\r\n    &:hover {\r\n        background: #6382e6;\r\n    }\r\n    &:active {\r\n        background: #2050c9;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor: pointer;\r\n    width: 80px;\r\n    height: 80px;\r\n    display: block;\r\n    align-items: center;\r\n    justify-content: center;\r\n    font-size: 60px;\r\n    position: absolute;\r\n    left: 50%;\r\n    bottom: 0px;\r\n    transform: translate(-50%, 50%);\r\n    color: white;\r\n    border-radius: 50%;\r\n    border: none;\r\n    outline: none;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    transition: 0.125s all ease-in;\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    h2 {\r\n        margin: 0;\r\n        padding-left: 45px;\r\n        padding-right: 32px;\r\n        font-size: 30px;\r\n        color: #343a40;\r\n    }\r\n    width: 100%;\r\n    bottom: 0;\r\n    left: 0;\r\n    position: absolute;\r\n`;\r\n\r\nconst InsertId = styled.form`\r\n    padding-left: 32px;\r\n    padding-top: 15px;\r\n    padding-right: 32px;\r\n    padding-bottom: 70px;\r\n\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n`;\r\n\r\nconst InsertPw = styled.form`\r\n    padding-left: 32px;\r\n    padding-top: 15px;\r\n    padding-right: 32px;\r\n    padding-bottom: 170px;\r\n\r\n    border-bottom-left-radius: 16px;\r\n    border-bottom-right-radius: 16px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding: 12px;\r\n    border-radius: 4px;\r\n    border: 1px solid #dee2e6;\r\n    width: 100%;\r\n    outline: none;\r\n    font-size: 18px;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoLogin() {\r\n    const navigate = useNavigate();\r\n    const dispatch = useDispatch();\r\n\r\n    const [id, setId] = useState('');\r\n    const [pw, setPw] = useState('');\r\n\r\n    const onLogin = async () => {\r\n        try {\r\n            const res = await apiCaller.Login(id, pw);\r\n            const authInfo: iUserInfo = {\r\n                id: res.data.id,\r\n                userid: res.data.userid,\r\n                userpw: res.data.userpw,\r\n            };\r\n            dispatch(userLogined(authInfo));\r\n\r\n            navigate('/todo');\r\n        } catch (ex) {\r\n            alert('Failed.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <TodoHeadBlock>\r\n                <h1>Login</h1>\r\n            </TodoHeadBlock>\r\n            <InsertFormPositioner>\r\n                <h2>Id</h2>\r\n                <InsertId>\r\n                    <Input placeholder=\"Id\" onChange={(e) => setId(e.target.value)}></Input>\r\n                </InsertId>\r\n                <h2>Password</h2>\r\n                <InsertPw>\r\n                    <Input placeholder=\"Password\" onChange={(e) => setPw(e.target.value)}></Input>\r\n                </InsertPw>\r\n            </InsertFormPositioner>\r\n            <LoginButton onClick={onLogin}>\r\n                <IoMdLogIn />\r\n            </LoginButton>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default React.memo(TodoLogin);\r\n","import React from 'react';\r\nimport TodoLoginTemplate from '../components/login/TodoLoginTemplate';\r\nimport TodoLogin from '../components/login/TodoLogin';\r\n\r\nfunction LoginPage() {\r\n    return (\r\n        <TodoLoginTemplate>\r\n            <TodoLogin />\r\n        </TodoLoginTemplate>\r\n    );\r\n}\r\n\r\nexport default LoginPage;\r\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nexport default TodoTemplate;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n`;\n\nconst TasksLeft = styled.div`\n  color: #2050c9;\n  font-size: 18px;\n  margin-top: 40px;\n  font-weight: bold;\n`;\n\nfunction TodoHead() {\n  const today = new Date();\n\n  const dateString = today.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const dayName = today.toLocaleString('ko-KR', { weekday: 'long' });\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  return (\n    <TodoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <TasksLeft>할 일 {undoneTasks.length}개 남음</TasksLeft>\n    </TodoHeadBlock>\n  );\n}\n\nexport default TodoHead;\n","import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { MdDone, MdDelete } from \"react-icons/md\";\nimport { useTodoDispatch } from \"../TodoContext\";\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\ninterface ICheckCircle {\n  done: boolean;\n}\nconst CheckCircle = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${(props: ICheckCircle) =>\n    props.done &&\n    css`\n      border: 1px solid #3866d9;\n      color: #3866d9;\n    `}\n`;\n\ninterface IText {\n  done: boolean;\n}\nconst Text = styled.div`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${(props: IText) =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nfunction TodoItem({ id, done, text }) {\n  const dispatch = useTodoDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: \"TOGGLE\",\n      id,\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: \"REMOVE\",\n      id,\n    });\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n        {done === 1 && <MdDone />} \n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n}\n\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nfunction TodoList() {\n  const todos = useTodoState();\n  return (\n    <TodoListBlock>\n      {todos.map(todo => (\n        <TodoItem\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          key={todo.id}\n        />\n      ))}\n    </TodoListBlock>\n  );\n}\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\ninterface iCircleButton {\n    open: boolean;\n}\n\nconst CircleButton = styled.button<iCircleButton>`\n    background: #3866d9;\n    &:hover {\n        background: #6382e6; \n    }\n    &:active {\n        background: #2050c9; \n    }\n\n    z-index: 5;\n    cursor: pointer;\n    width: 80px;\n    height: 80px;\n    display: block;\n    align-items: center;\n    justify-content: center;\n    font-size: 60px;\n    position: absolute;\n    left: 50%;\n    bottom: 0px;\n    transform: translate(-50%, 50%);\n    color: white;\n    border-radius: 50%;\n    border: none;\n    outline: none;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    transition: 0.125s all ease-in;\n    ${(props) =>\n        props.open &&\n        css`\n            background: #ff6b6b;\n            &:hover {\n                background: #ff8787;\n            }\n            &:active {\n                background: #fa5252;\n            }\n            transform: translate(-50%, 50%) rotate(45deg);\n        `}\n`;\n\nconst InsertFormPositioner = styled.div`\n    width: 100%;\n    bottom: 0;\n    left: 0;\n    position: absolute;\n`;\n\nconst InsertForm = styled.form`\n    background: #f8f9fa;\n    padding-left: 32px;\n    padding-top: 32px;\n    padding-right: 32px;\n    padding-bottom: 72px;\n\n    border-bottom-left-radius: 16px;\n    border-bottom-right-radius: 16px;\n    border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n    padding: 12px;\n    border-radius: 4px;\n    border: 1px solid #dee2e6;\n    width: 100%;\n    outline: none;\n    font-size: 18px;\n    box-sizing: border-box;\n`;\n\nfunction TodoCreate() {\n    const [open, setOpen] = useState(false);\n    const [value, setValue] = useState('');\n    const dispatch = useTodoDispatch();\n    const nextId: any = useTodoNextId();\n\n    const onToggle = () => setOpen(!open);\n    const onChange = e => setValue(e.target.value);\n    const onSubmit = e => {\n        e.preventDefault();\n        dispatch({\n            type: 'CREATE',\n            todo: {\n                id: nextId ? nextId : nextId.current,\n                text: value,\n                done: false,\n            },\n        });\n        setOpen(false);\n        setValue('');\n    };\n\n    return (\n        <>\n            {open && (\n                <InsertFormPositioner>\n                    <InsertForm onSubmit={onSubmit}>\n                        <Input\n                            autoFocus\n                            onChange={onChange}\n                            value={value}\n                            placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\n                        />\n                    </InsertForm>\n                </InsertFormPositioner>\n            )}\n            <CircleButton onClick={onToggle} open={open}>\n                <MdAdd />\n            </CircleButton>\n        </>\n    );\n}\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\r\nimport TodoTemplate from '../components/TodoTemplate';\r\nimport TodoHead from '../components/TodoHead';\r\nimport TodoList from '../components/TodoList';\r\nimport TodoCreate from '../components/TodoCreate';\r\n\r\nconst MainPage = () => {\r\n    return (\r\n        <TodoTemplate>\r\n            <TodoHead />\r\n            <TodoList />\r\n            <TodoCreate />\r\n        </TodoTemplate>\r\n    );\r\n}\r\n\r\nexport default MainPage;\r\n","import React from 'react';\r\nimport { Routes, Route } from 'react-router-dom';\r\n\r\nimport LoginPage from './LoginPage';\r\nimport MainPage from './MainPage';\r\n\r\nconst Pages = () => {\r\n    return (\r\n        <Routes>\r\n            <Route path=\"/\" element={<LoginPage />} />\r\n            <Route path=\"/todo\" element={<MainPage />} />\r\n        </Routes>\r\n    );\r\n};\r\n\r\nexport default Pages;\r\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport { TodoProvider } from './TodoContext';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Routes from './pages/Routes';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef\n  }\n`;\nconst App = () => {\n    return (\n        <BrowserRouter>\n            <TodoProvider>\n                <GlobalStyle />\n                <Routes />\n            </TodoProvider>\n        </BrowserRouter>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { configureStore, combineReducers, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport { persistReducer, persistStore } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nimport loginReducer from './features/loginSlice';\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    verson: 1,\r\n    storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(\r\n    persistConfig,\r\n    combineReducers({\r\n        user: loginReducer,\r\n    }),\r\n);\r\n\r\nexport const store = configureStore({\r\n    reducer: persistedReducer,\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}