{"ast":null,"code":"import _slicedToArray from \"C:\\\\workspace\\\\studying\\\\typescript\\\\my-todolist\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"C:\\\\workspace\\\\studying\\\\typescript\\\\my-todolist\\\\ui\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\workspace\\\\studying\\\\typescript\\\\my-todolist\\\\ui\\\\src\\\\TodoContext.tsx\";\nimport React, { createContext, useReducer, useContext, useEffect, useState } from \"react\";\nimport * as apiCaller from \"./util/apiCaller\";\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext(null);\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case \"CREATE\":\n      apiCaller.AddItems(action.todo);\n      return state.concat(action.todo);\n\n    case \"TOGGLE\":\n      return state.map(todo => todo.id === action.id ? _objectSpread({}, todo, {\n        done: !todo.done\n      }) : todo);\n\n    case \"REMOVE\":\n      return state.filter(todo => todo.id !== action.id);\n\n    case \"REPLACE\":\n      return action.array;\n\n    default:\n      return state;\n  }\n}\n\nconst initialTodos = [{\n  id: 1,\n  text: \"sample 1\",\n  done: false\n}, {\n  id: 2,\n  text: \"sample 2\",\n  done: true\n}];\nexport function TodoProvider({\n  children\n}) {\n  const _useReducer = useReducer(todoReducer, initialTodos),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const _useState = useState(3),\n        _useState2 = _slicedToArray(_useState, 2),\n        nextId = _useState2[0],\n        setNextID = _useState2[1];\n\n  const initial = useEffect(() => {\n    let data;\n\n    async function getItems() {\n      data = await apiCaller.GetItems();\n      dispatch({\n        type: 'REPLACE',\n        array: data\n      });\n    }\n\n    getItems();\n  }, []);\n  return React.createElement(TodoStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(TodoDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(TodoNextIdContext.Provider, {\n    value: nextId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, children)));\n}\nexport function useTodoState() {\n  return useContext(TodoStateContext);\n}\nexport function useTodoDispatch() {\n  return useContext(TodoDispatchContext);\n}\nexport function useTodoNextId() {\n  return useContext(TodoNextIdContext);\n}","map":{"version":3,"sources":["C:\\workspace\\studying\\typescript\\my-todolist\\ui\\src\\TodoContext.tsx"],"names":["React","createContext","useReducer","useContext","useEffect","useState","apiCaller","TodoStateContext","TodoDispatchContext","TodoNextIdContext","todoReducer","state","action","type","AddItems","todo","concat","map","id","done","filter","array","initialTodos","text","TodoProvider","children","dispatch","nextId","setNextID","initial","data","getItems","GetItems","useTodoState","useTodoDispatch","useTodoNextId"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useReducer,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as apiCaller from \"./util/apiCaller\";\n\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext(null);\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case \"CREATE\":\n      apiCaller.AddItems(action.todo);\n      return state.concat(action.todo);\n    case \"TOGGLE\":\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case \"REMOVE\":\n      return state.filter((todo) => todo.id !== action.id);\n    case \"REPLACE\":\n      return action.array;\n    default:\n      return state;\n  }\n}\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"sample 1\",\n    done: false,\n  },\n  {\n    id: 2,\n    text: \"sample 2\",\n    done: true,\n  },\n];\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const [nextId, setNextID] = useState(3);\n  const initial = useEffect(() => {\n    let data;\n    async function getItems() {\n      data = await apiCaller.GetItems();\n      dispatch({\n        type: 'REPLACE',\n        array: data,\n      });\n    }\n    getItems();\n  }, []);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nexport function useTodoState() {\n  return useContext(TodoStateContext);\n}\n\nexport function useTodoDispatch() {\n  return useContext(TodoDispatchContext);\n}\n\nexport function useTodoNextId() {\n  return useContext(TodoNextIdContext);\n}\n"]},"metadata":{},"sourceType":"module"}