{"version":3,"sources":["components/TodoTemplate.tsx","util/apiCaller.ts","TodoContext.tsx","components/TodoHead.tsx","components/TodoItem.tsx","components/TodoList.tsx","components/TodoCreate.tsx","App.tsx","serviceWorker.tsx","index.tsx"],"names":["TodoTemplateBlock","styled","div","_templateObject","TodoTemplate","_ref","children","react_default","a","createElement","_callee","todo","regenerator_default","wrap","_context","prev","next","axios","post","text","abrupt","sent","t0","console","log","stop","GetItems","_GetItems","apply","this","arguments","_callee2","response","_context2","get","data","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","todoReducer","state","action","type","_x","_AddItems","apiCaller","concat","map","id","Object","objectSpread","done","filter","array","initialTodos","TodoProvider","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","_useState","useState","_useState2","nextId","setNextID","useEffect","_getItems","asyncToGenerator","mark","nextID","length","getItems","Provider","value","useTodoState","useContext","useTodoDispatch","TodoHeadBlock","TodoHead_templateObject","TasksLeft","_templateObject2","TodoHead","today","Date","dateString","toLocaleString","year","month","day","dayName","weekday","undoneTasks","className","Remove","TodoItem_templateObject","TodoItemBlock","TodoItem_templateObject2","CheckCircle","_templateObject3","props","css","_templateObject4","Text","_templateObject5","_templateObject6","React","memo","onClick","index_esm","TodoListBlock","TodoList_templateObject","TodoList","todos","components_TodoItem","key","CircleButton","button","TodoCreate_templateObject","open","TodoCreate_templateObject2","InsertFormPositioner","TodoCreate_templateObject3","InsertForm","form","TodoCreate_templateObject4","Input","input","TodoCreate_templateObject5","setOpen","_useState3","_useState4","setValue","Fragment","onSubmit","e","preventDefault","current","autoFocus","onChange","target","placeholder","GlobalStyle","createGlobalStyle","App_templateObject","App","components_TodoTemplate","components_TodoHead","components_TodoList","components_TodoCreate","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a2bc0079.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nconst TodoTemplateBlock = styled.div`\n  width: 512px;\n  height: 768px;\n\n  position: relative;\n  background: white;\n  border-radius: 16px;\n  box-shadow: 0 0 8px 0 rgba(0, 0, 0, 0.04);\n  margin: 0 auto;\n  margin-top: 96px;\n  margin-bottom: 32px;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nfunction TodoTemplate({ children }) {\n  return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\n}\n\nexport default TodoTemplate;\n","import axios from \"axios\";\r\n\r\nexport async function AddItems(todo) {\r\n  try {\r\n    return await axios.post(\"/addItem\", {\r\n      text: todo.text,\r\n    });\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n\r\nexport async function GetItems() {\r\n  try {\r\n    const response = await axios.get(\"/getItem\", {});\r\n    return response.data;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}","import React, {\n  createContext,\n  useReducer,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport * as apiCaller from \"./util/apiCaller\";\n\nconst TodoStateContext = createContext(null);\nconst TodoDispatchContext = createContext(null);\nconst TodoNextIdContext = createContext(null);\n\nfunction todoReducer(state, action) {\n  switch (action.type) {\n    case \"CREATE\":\n      apiCaller.AddItems(action.todo);\n      return state.concat(action.todo);\n    case \"TOGGLE\":\n      return state.map((todo) =>\n        todo.id === action.id ? { ...todo, done: !todo.done } : todo\n      );\n    case \"REMOVE\":\n      return state.filter((todo) => todo.id !== action.id);\n    case \"REPLACE\":\n      let arr = action.array;\n      return arr;\n    default:\n      return state;\n  }\n}\n\nconst initialTodos = [\n  {\n    id: 1,\n    text: \"sample 1\",\n    done: false,\n  },\n  {\n    id: 2,\n    text: \"sample 2\",\n    done: true,\n  },\n];\n\nexport function TodoProvider({ children }) {\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\n  const [nextId, setNextID] = useState(3);\n  const initial = useEffect(() => {\n    let data;\n    async function getItems() {\n      data = await apiCaller.GetItems();\n      let nextID = data[data.length - 1].id;\n      setNextID(nextID + 1);\n      dispatch({\n        type: \"REPLACE\",\n        array: data,\n      });\n    }\n    getItems();\n  }, []);\n\n  return (\n    <TodoStateContext.Provider value={state}>\n      <TodoDispatchContext.Provider value={dispatch}>\n        <TodoNextIdContext.Provider value={nextId}>\n          {children}\n        </TodoNextIdContext.Provider>\n      </TodoDispatchContext.Provider>\n    </TodoStateContext.Provider>\n  );\n}\n\nexport function useTodoState() {\n  return useContext(TodoStateContext);\n}\n\nexport function useTodoDispatch() {\n  return useContext(TodoDispatchContext);\n}\n\nexport function useTodoNextId() {\n  return useContext(TodoNextIdContext);\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoHeadBlock = styled.div`\n  h1 {\n    margin: 0;\n    font-size: 36px;\n    color: #343a40;\n  }\n  .day {\n    margin-top: 4px;\n    color: #868e96;\n    font-size: 21px;\n  }\n  padding-top: 48px;\n  padding-left: 32px;\n  padding-right: 32px;\n  padding-bottom: 24px;\n  border-bottom: 1px solid #e9ecef;\n`;\n\nconst TasksLeft = styled.div`\n  color: #20c997;\n  font-size: 18px;\n  margin-top: 40px;\n  font-weight: bold;\n`;\n\nfunction TodoHead() {\n  const today = new Date();\n\n  const dateString = today.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n\n  const dayName = today.toLocaleString('ko-KR', { weekday: 'long' });\n  const todos = useTodoState();\n  const undoneTasks = todos.filter(todo => !todo.done);\n\n  return (\n    <TodoHeadBlock>\n      <h1>{dateString}</h1>\n      <div className=\"day\">{dayName}</div>\n      <TasksLeft>할 일 {undoneTasks.length}개 남음</TasksLeft>\n    </TodoHeadBlock>\n  );\n}\n\nexport default TodoHead;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdDone, MdDelete } from 'react-icons/md';\nimport { useTodoDispatch } from '../TodoContext';\n\ninterface iCheckCircle {\n  done: boolean;\n}\n\nconst Remove = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  display: none;\n`;\n\nconst TodoItemBlock = styled.div`\n  display: flex;\n  align-items: center;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  &:hover {\n    ${Remove} {\n      display: initial;\n    }\n  }\n`;\n\nconst CheckCircle = styled.div<iCheckCircle>`\n  width: 32px;\n  height: 32px;\n  border-radius: 16px;\n  border: 1px solid #ced4da;\n  font-size: 24px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-right: 20px;\n  cursor: pointer;\n  ${props =>\n    props.done &&\n    css`\n      border: 1px solid #38d9a9;\n      color: #38d9a9;\n    `}\n`;\n\nconst Text = styled.div<iCheckCircle>`\n  flex: 1;\n  font-size: 21px;\n  color: #495057;\n  ${props =>\n    props.done &&\n    css`\n      color: #ced4da;\n    `}\n`;\n\nfunction TodoItem({ id, done, text }) {\n  const dispatch = useTodoDispatch();\n\n  const onToggle = () => {\n    dispatch({\n      type: 'TOGGLE',\n      id\n    });\n  };\n\n  const onRemove = () => {\n    dispatch({\n      type: 'REMOVE',\n      id\n    });\n  };\n\n  return (\n    <TodoItemBlock>\n      <CheckCircle done={done} onClick={onToggle}>\n        {done && <MdDone />}\n      </CheckCircle>\n      <Text done={done}>{text}</Text>\n      <Remove onClick={onRemove}>\n        <MdDelete />\n      </Remove>\n    </TodoItemBlock>\n  );\n}\n\nexport default React.memo(TodoItem);\n","import React from 'react';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\nimport { useTodoState } from '../TodoContext';\n\nconst TodoListBlock = styled.div`\n  flex: 1;\n  padding: 20px 32px;\n  padding-bottom: 48px;\n  overflow-y: auto;\n`;\n\nfunction TodoList() {\n  const todos = useTodoState();\n  return (\n    <TodoListBlock>\n      {todos.map(todo => (\n        <TodoItem\n          id={todo.id}\n          text={todo.text}\n          done={todo.done}\n          key={todo.id}\n        />\n      ))}\n    </TodoListBlock>\n  );\n}\n\nexport default TodoList;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { MdAdd } from 'react-icons/md';\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\n\ninterface iCircleButton {\n  open: boolean;\n}\n\nconst CircleButton = styled.button<iCircleButton>`\n  background: #38d9a9;\n  &:hover {\n    background: #63e6be;\n  }\n  &:active {\n    background: #20c997;\n  }\n\n  z-index: 5;\n  cursor: pointer;\n  width: 80px;\n  height: 80px;\n  display: block;\n  align-items: center;\n  justify-content: center;\n  font-size: 60px;\n  position: absolute;\n  left: 50%;\n  bottom: 0px;\n  transform: translate(-50%, 50%);\n  color: white;\n  border-radius: 50%;\n  border: none;\n  outline: none;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  transition: 0.125s all ease-in;\n  ${props =>\n    props.open &&\n    css`\n      background: #ff6b6b;\n      &:hover {\n        background: #ff8787;\n      }\n      &:active {\n        background: #fa5252;\n      }\n      transform: translate(-50%, 50%) rotate(45deg);\n    `}\n`;\n\nconst InsertFormPositioner = styled.div`\n  width: 100%;\n  bottom: 0;\n  left: 0;\n  position: absolute;\n`;\n\nconst InsertForm = styled.form`\n  background: #f8f9fa;\n  padding-left: 32px;\n  padding-top: 32px;\n  padding-right: 32px;\n  padding-bottom: 72px;\n\n  border-bottom-left-radius: 16px;\n  border-bottom-right-radius: 16px;\n  border-top: 1px solid #e9ecef;\n`;\n\nconst Input = styled.input`\n  padding: 12px;\n  border-radius: 4px;\n  border: 1px solid #dee2e6;\n  width: 100%;\n  outline: none;\n  font-size: 18px;\n  box-sizing: border-box;\n`;\n\nfunction TodoCreate() {\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState('');\n  const dispatch = useTodoDispatch();\n  const nextId = useTodoNextId();\n\n  const onToggle = () => setOpen(!open);\n  const onChange = e => setValue(e.target.value);\n  const onSubmit = e => {\n    e.preventDefault();\n    dispatch({\n      type: 'CREATE',\n      todo: {\n        id: nextId.current,\n        text: value,\n        done: false\n      }\n    });\n    nextId.current += 1;\n    setOpen(false);\n    setValue('');\n  };\n\n  return (\n    <>\n      {open && (\n        <InsertFormPositioner>\n          <InsertForm onSubmit={onSubmit}>\n            <Input\n              autoFocus\n              onChange={onChange}\n              value={value}\n              placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\n            />\n          </InsertForm>\n        </InsertFormPositioner>\n      )}\n      <CircleButton onClick={onToggle} open={open}>\n        <MdAdd />\n      </CircleButton>\n    </>\n  );\n}\n\nexport default React.memo(TodoCreate);\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef\n  }\n`;\nfunction App() {\n  return (\n    <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n        <TodoHead />\n        <TodoList />\n        <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}